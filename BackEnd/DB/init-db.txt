CREATE DATABASE cinepolis_db WITH OWNER = postgres TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'en_US.utf8' LC_CTYPE = 'en_US.utf8';

\c cinepolis_db

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE TABLE user_type (
    usertype_id INT GENERATED ALWAYS AS IDENTITY,
    name VARCHAR (50) UNIQUE NOT NULL,
    PRIMARY KEY(usertype_id)
);

CREATE TABLE users (
    user_id INT GENERATED ALWAYS AS IDENTITY,
    name VARCHAR (50) NOT NULL,
    lastname VARCHAR (50) NOT NULL,
    secondlastname VARCHAR (50) NOT NULL,
    email VARCHAR (255) UNIQUE NOT NULL,
    password VARCHAR (50) NOT NULL,
    birthday TIMESTAMP NOT NULL,
    vaccines INT,
    created_on TIMESTAMP NOT NULL,
    usertype_id INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY(user_id),
    CONSTRAINT fk_usertype
        FOREIGN KEY(usertype_id)
        REFERENCES user_type(usertype_id)
        ON DELETE SET NULL
);

CREATE TABLE reservations (
    reservation_id INT GENERATED ALWAYS AS IDENTITY,
    active BOOLEAN NOT NULL,
    created_on TIMESTAMP NOT NULL,
    user_id INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY(reservation_id),
    CONSTRAINT fk_user
        FOREIGN KEY(user_id)
        REFERENCES users(user_id)
        ON DELETE SET NULL
);

CREATE TABLE payments (
    payment_id INT GENERATED ALWAYS AS IDENTITY,
    amount NUMERIC(8,2) NOT NULL,
    merchant VARCHAR (50),
    status VARCHAR (50) NOT NULL,
    transaction_number INT,
    created_on TIMESTAMP NOT NULL,
    reservation_id INT GENERATED ALWAYS AS IDENTITY, 
    PRIMARY KEY(payment_id),
    CONSTRAINT fk_reservation
        FOREIGN KEY(reservation_id)
        REFERENCES reservations(reservation_id)
        ON DELETE SET NULL
);

CREATE TABLE salas (
    sala_id INT GENERATED ALWAYS AS IDENTITY,
    amount_seats NUMERIC(8,2) NOT NULL,
    name VARCHAR (50) UNIQUE NOT NULL,
    PRIMARY KEY(sala_id)
);

CREATE TABLE seats (
    seat_id INT GENERATED ALWAYS AS IDENTITY,
    row CHAR NOT NULL,
    number INT NOT NULL,
    sala_id INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY(seat_id),
    CONSTRAINT fk_sala
        FOREIGN KEY(sala_id)
        REFERENCES salas(sala_id)
        ON DELETE SET NULL
);

CREATE TABLE movies (
    movie_id INT GENERATED ALWAYS AS IDENTITY,
    title VARCHAR (70) NOT NULL,
    actors VARCHAR (1000) NOT NULL,
    description VARCHAR (2000) NOT NULL,
    director VARCHAR (100) NOT NULL,
    duration NUMERIC(8,2) NOT NULL,
    minimum_age INT NOT NULL,
    genre VARCHAR (50),
    year INT,
    languages VARCHAR (200),
    image VARCHAR(150),
    PRIMARY KEY(movie_id)
);

CREATE TABLE chart (
    chart_id INT GENERATED ALWAYS AS IDENTITY,
    start_time TIMESTAMP NOT NULL,
    price_general NUMERIC(8,2),
    price_children NUMERIC(8,2),
    price_elderly NUMERIC(8,2),
    sala_id INT GENERATED ALWAYS AS IDENTITY,
    movie_id INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY(chart_id),
    CONSTRAINT fk_sala
        FOREIGN KEY(sala_id)
        REFERENCES salas(sala_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_movie
        FOREIGN KEY(movie_id)
        REFERENCES movies(movie_id)
        ON DELETE SET NULL
);

CREATE TABLE seats_reserved (
    seats_reserved_id INT GENERATED ALWAYS AS IDENTITY,
    seat_id INT GENERATED ALWAYS AS IDENTITY,
    chart_id INT GENERATED ALWAYS AS IDENTITY,
    reservation_id INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY(seats_reserved_id),
    CONSTRAINT fk_seat
        FOREIGN KEY(seat_id)
        REFERENCES seats(seat_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_chart
        FOREIGN KEY(chart_id)
        REFERENCES chart(chart_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_reservation
        FOREIGN KEY(reservation_id)
        REFERENCES reservations(reservation_id)
        ON DELETE SET NULL
);

CREATE TABLE food (
    food_id INT GENERATED ALWAYS AS IDENTITY,
    name VARCHAR (70) NOT NULL,
    price NUMERIC(8,2) NOT NULL,
    type VARCHAR(50),
    image VARCHAR(150),
    amount_available INT,
    PRIMARY KEY(food_id)
);

CREATE TABLE food_reserved (
    food_reserved_id INT GENERATED ALWAYS AS IDENTITY,
    food_id INT GENERATED ALWAYS AS IDENTITY,
    reservation_id INT GENERATED ALWAYS AS IDENTITY,
    PRIMARY KEY(food_reserved_id),
    CONSTRAINT fk_food
        FOREIGN KEY(food_id)
        REFERENCES food(food_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_reservation
        FOREIGN KEY(reservation_id)
        REFERENCES reservations(reservation_id)
        ON DELETE SET NULL
);

